    
    if(localCommand == 0700){
        r = [0,0,0];
        xhat = [unit3d,0,0];
        yhat = [0,unit3d,0];
        zhat = [0,0,unit3d];
        scale3d = 2;
        side3d = unit3d;
        solidColor = "1 0 0";
        thetaStep3d = Math.PI/2;
        alpha = 0;
        beta = 0;
        gamma = 0;
        mostRecentSymbolAction = 01177;
        quantumStateIndex = 0;//number of states is 2^N, where there are N qubits
        quantumAngleIndex = 0;//number of angles are 2^N - 1
        currentTrans = 0.0;

    }
    if(localCommand == 0701){
        side3d = unit3d;
        currentTrans = 0.0;
    }
    if(localCommand == 0707){
        drawcursor();
    }
    if(localCommand == 0710){
        scale3d = 2;
    }
    if(localCommand == 0711){
        scale3d = 1.5;//     3/2
    }
    if(localCommand == 0712){
        scale3d = 1.25;//    5/4
    }
    if(localCommand == 0713){
        scale3d = 1.125;//   9/8
    }
    if(localCommand == 0714){
        scale3d = 1.0625;//  17/16
    }

    if(localCommand == 0720){
        solidColor = "1 0 0";
    }
    if(localCommand == 0721){
        solidColor = "1 0.5 0";
    }
    if(localCommand == 0722){
        solidColor = "1 1 0";
    }
    if(localCommand == 0723){
        solidColor = "0 1 0";
    }
    if(localCommand == 0724){
        solidColor = "0 0 1";
    }
    if(localCommand == 0725){
        solidColor = "0.5 0 0.5";
    }
    if(localCommand == 0726){
        solidColor = "1 0 1";
    }
    if(localCommand == 0727){
        solidColor = "0.5 0.5 0.5";
    }
    if(localCommand == 0730){   
        r  = [xhat[0] + r[0],xhat[1] + r[1],xhat[2] + r[2]];

        var newt = document.createElement("transform");
        newt.setAttribute("translation", xhat[0].toString() + " " + xhat[1].toString() + " " + xhat[2].toString() );

    }
    if(localCommand == 0731){
        r  = [-xhat[0] + r[0],-xhat[1] + r[1],-xhat[2] + r[2]];
        var newt = document.createElement("transform");
        newt.setAttribute("translation",(-xhat[0]).toString() + " " + (-xhat[1]).toString() + " " + (-xhat[2]).toString() );
        
    }
    if(localCommand == 0732){
        r  = [yhat[0] + r[0],yhat[1] + r[1],yhat[2] + r[2]];
        var newt = document.createElement("transform");
        newt.setAttribute("translation",yhat[0].toString() + " " + yhat[1].toString() + " " + yhat[2].toString() );
        
    }
    if(localCommand == 0733){
        r  = [-yhat[0] + r[0],-yhat[1] + r[1],-yhat[2] + r[2]];
        var newt = document.createElement("transform");
        newt.setAttribute("translation",(-yhat[0]).toString() + " " + (-yhat[1]).toString() + " " + (-yhat[2]).toString() );
        
    }
    if(localCommand == 0734){
        r  = [zhat[0] + r[0],zhat[1] + r[1],zhat[2] + r[2]];
        var newt = document.createElement("transform");
        newt.setAttribute("translation",zhat[0].toString() + " " + zhat[1].toString() + " " + zhat[2].toString() );
    }
    if(localCommand == 0735){
        r  = [-zhat[0] + r[0],-zhat[1] + r[1],-zhat[2] + r[2]];
        var newt = document.createElement("transform");
        newt.setAttribute("translation",(-zhat[0]).toString() + " " + (-zhat[1]).toString() + " " + (-zhat[2]).toString());
    }
    if(localCommand == 0736){
         xhat = [xhat[0]/scale3d,xhat[1]/scale3d,xhat[2]/scale3d];
         yhat = [yhat[0]/scale3d,yhat[1]/scale3d,yhat[2]/scale3d];
         zhat = [zhat[0]/scale3d,zhat[1]/scale3d,zhat[2]/scale3d];
         side3d /=scale3d;
            
    }
    if(localCommand == 0737){
         xhat = [xhat[0]*scale3d,xhat[1]*scale3d,xhat[2]*scale3d];
         yhat = [yhat[0]*scale3d,yhat[1]*scale3d,yhat[2]*scale3d];
         zhat = [zhat[0]*scale3d,zhat[1]*scale3d,zhat[2]*scale3d];
         side3d *=scale3d;
    }
    
    
    if(localCommand == 0740){
        //box
      
        var news = document.createElement("shape");
        var newt = document.createElement("transform");
        main.appendChild(newt);
        newt.setAttribute("translation",r[0].toString() + " " + r[1].toString() + " " + r[2].toString() );
        var newt2 = document.createElement("transform");
        newt.appendChild(newt2);
        newt2.setAttribute("scale",(0.5*side3d).toString() + " " + (0.5*side3d).toString() + " " + (0.5*side3d).toString());

        var newt3 = document.createElement("transform");
        newt2.appendChild(newt3);
        alpha = -Math.atan2(yhat[0],yhat[1]);
        newt3.setAttribute("rotation",zhat[0].toString() + " " + zhat[1].toString() + " " + zhat[2].toString() + " "+ alpha.toString());
        var newt4 = document.createElement("transform");
        newt3.appendChild(newt4);
        beta = -Math.atan2(xhat[2],xhat[0]);
        newt4.setAttribute("rotation",yhat[0].toString() + " " + yhat[1].toString() + " " + yhat[2].toString() + " "+ beta.toString());

        var newt5 = document.createElement("transform");
        newt4.appendChild(newt5);
        gamma = Math.atan2(yhat[2],yhat[1]);
        newt5.setAttribute("rotation",xhat[0].toString() + " " + xhat[1].toString() + " " + xhat[2].toString() + " "+ gamma.toString());
        newt5.appendChild(news);

        var newa = document.createElement("appearance");
        news.appendChild(newa);
        var newm = document.createElement("material");
        newm.setAttribute("diffuseColor",solidColor);
        newm.setAttribute("transparency",currentTrans);
        newa.appendChild(newm);
        var newb = document.createElement("box");
        news.appendChild(newb);
        
    }
    if(localCommand == 0741){
        
        //sphere
      
        var news = document.createElement("shape");
        var newt = document.createElement("transform");
        main.appendChild(newt);
        newt.setAttribute("translation",r[0].toString() + " " + r[1].toString() + " " + r[2].toString() );
        var newt2 = document.createElement("transform");
        newt.appendChild(newt2);
        newt2.setAttribute("scale",(0.5*side3d).toString() + " " + (0.5*side3d).toString() + " " + (0.5*side3d).toString());
        newt2.appendChild(news);
        var newa = document.createElement("appearance");
        news.appendChild(newa);
        var newm = document.createElement("material");
        newm.setAttribute("diffuseColor",solidColor);
        newm.setAttribute("transparency",currentTrans);
        newa.appendChild(newm);
        var newb = document.createElement("sphere");
        news.appendChild(newb);
    }
    if(localCommand == 0742){
        //cylinder
        var news = document.createElement("shape");
        var newt = document.createElement("transform");
        main.appendChild(newt);
        newt.setAttribute("translation",r[0].toString() + " " + r[1].toString() + " " + r[2].toString() );
        var newt2 = document.createElement("transform");
        newt.appendChild(newt2);
        newt2.setAttribute("scale",(0.5*side3d).toString() + " " + (0.5*side3d).toString() + " " + (0.5*side3d).toString());
        var newt3 = document.createElement("transform");
        newt2.appendChild(newt3);
        alpha = -Math.atan2(yhat[0],yhat[1]);
        newt3.setAttribute("rotation",zhat[0].toString() + " " + zhat[1].toString() + " " + zhat[2].toString() + " "+ alpha.toString());
        var newt4 = document.createElement("transform");
        newt3.appendChild(newt4);
        beta = -Math.atan2(xhat[2],xhat[0]);
        newt4.setAttribute("rotation",yhat[0].toString() + " " + yhat[1].toString() + " " + yhat[2].toString() + " "+ beta.toString());

        var newt5 = document.createElement("transform");
        newt4.appendChild(newt5);
        gamma = Math.atan2(yhat[2],yhat[1]);
        newt5.setAttribute("rotation",xhat[0].toString() + " " + xhat[1].toString() + " " + xhat[2].toString() + " "+ gamma.toString());
        newt5.appendChild(news);

        var newa = document.createElement("appearance");
        news.appendChild(newa);
        var newm = document.createElement("material");
        newm.setAttribute("diffuseColor",solidColor);
        newm.setAttribute("transparency",currentTrans);
        newa.appendChild(newm);
        var newb = document.createElement("cylinder");
        news.appendChild(newb);
    }
    if(localCommand == 0743){
        
        //cone
        var news = document.createElement("shape");
        var newt = document.createElement("transform");
        main.appendChild(newt);
        newt.setAttribute("translation",r[0].toString() + " " + r[1].toString() + " " + r[2].toString() );
        var newt2 = document.createElement("transform");
        newt.appendChild(newt2);
        newt2.setAttribute("scale",(0.5*side3d).toString() + " " + (0.5*side3d).toString() + " " + (0.5*side3d).toString());
        var newt3 = document.createElement("transform");
        newt2.appendChild(newt3);
        alpha = -Math.atan2(yhat[0],yhat[1]);
        newt3.setAttribute("rotation",zhat[0].toString() + " " + zhat[1].toString() + " " + zhat[2].toString() + " "+ alpha.toString());
        var newt4 = document.createElement("transform");
        newt3.appendChild(newt4);
        beta = -Math.atan2(xhat[2],xhat[0]);
        newt4.setAttribute("rotation",yhat[0].toString() + " " + yhat[1].toString() + " " + yhat[2].toString() + " "+ beta.toString());

        var newt5 = document.createElement("transform");
        newt4.appendChild(newt5);
        gamma = Math.atan2(yhat[2],yhat[1]);
        newt5.setAttribute("rotation",xhat[0].toString() + " " + xhat[1].toString() + " " + xhat[2].toString() + " "+ gamma.toString());
        newt5.appendChild(news);

        var newa = document.createElement("appearance");
        news.appendChild(newa);
        var newm = document.createElement("material");
        newm.setAttribute("diffuseColor",solidColor);
        newm.setAttribute("transparency",currentTrans);
        newa.appendChild(newm);
        var newb = document.createElement("cone");
        news.appendChild(newb);
        
    }
    if(localCommand == 0744){
        
        //cone
        var news = document.createElement("shape");
        var newt = document.createElement("transform");
        main.appendChild(newt);
        newt.setAttribute("translation",r[0].toString() + " " + r[1].toString() + " " + r[2].toString() );
        var newt2 = document.createElement("transform");
        newt.appendChild(newt2);
        newt2.setAttribute("scale",(0.5*side3d).toString() + " " + (0.5*side3d).toString() + " " + (0.5*side3d).toString());
        var newt3 = document.createElement("transform");
        newt2.appendChild(newt3);
        alpha = -Math.atan2(yhat[0],yhat[1]);
        newt3.setAttribute("rotation",zhat[0].toString() + " " + zhat[1].toString() + " " + zhat[2].toString() + " "+ alpha.toString());
        var newt4 = document.createElement("transform");
        newt3.appendChild(newt4);
        beta = -Math.atan2(xhat[2],xhat[0]);
        newt4.setAttribute("rotation",yhat[0].toString() + " " + yhat[1].toString() + " " + yhat[2].toString() + " "+ beta.toString());

        var newt5 = document.createElement("transform");
        newt4.appendChild(newt5);
        gamma = Math.atan2(yhat[2],yhat[1]);
        newt5.setAttribute("rotation",xhat[0].toString() + " " + xhat[1].toString() + " " + xhat[2].toString() + " "+ gamma.toString());
        newt5.appendChild(news);

        var newa = document.createElement("appearance");
        news.appendChild(newa);
        var newm = document.createElement("material");
        newm.setAttribute("diffuseColor",solidColor);
        newm.setAttribute("transparency",currentTrans);

        newa.appendChild(newm);
        var newb = document.createElement("text");
        news.appendChild(newb);
        newb.setAttribute("string",currentWord);
        currentWord = "";
        currentHTML = "";
    }
    if(localCommand == 0750){
        //rotate around yhat axis, so leave yhat fixed;
        console.log(thetaStep3d);
        var xhatprime = [1,0,0];
        var yhatprime = [0,1,0];
        var zhatprime = [0,0,1];
        xhatprime[0] = Math.cos(thetaStep3d)*xhat[0] - Math.sin(thetaStep3d)*xhat[2];
        xhatprime[1] = xhat[1];
        xhatprime[2] = Math.sin(thetaStep3d)*xhat[0] + Math.cos(thetaStep3d)*xhat[2];
        yhatprime[0] = Math.cos(thetaStep3d)*yhat[0] - Math.sin(thetaStep3d)*yhat[2];
        yhatprime[1] = yhat[1];
        yhatprime[2] = Math.sin(thetaStep3d)*yhat[0] + Math.cos(thetaStep3d)*yhat[2];
        zhatprime[0] = Math.cos(thetaStep3d)*zhat[0] - Math.sin(thetaStep3d)*zhat[2];
        zhatprime[1]  = zhat[1];
        zhatprime[2] = Math.sin(thetaStep3d)*zhat[0] + Math.cos(thetaStep3d)*zhat[2];
        xhat = xhatprime;
        yhat = yhatprime;
        zhat = zhatprime;
    }
    if(localCommand == 0751){
        //rotate around yhat axis, so leave yhat fixed;
        var xhatprime = [1,0,0];
        var yhatprime = [0,1,0];
        var zhatprime = [0,0,1];
        xhatprime[0] = Math.cos(-thetaStep3d)*xhat[0] - Math.sin(-thetaStep3d)*xhat[2];
        xhatprime[1] = xhat[1];
        xhatprime[2] = Math.sin(-thetaStep3d)*xhat[0] + Math.cos(-thetaStep3d)*xhat[2];
        yhatprime[0] = Math.cos(-thetaStep3d)*yhat[0] - Math.sin(-thetaStep3d)*yhat[2];
        yhatprime[1] = yhat[1];
        yhatprime[2] = Math.sin(-thetaStep3d)*yhat[0] + Math.cos(-thetaStep3d)*yhat[2];
        zhatprime[0] = Math.cos(-thetaStep3d)*zhat[0] - Math.sin(-thetaStep3d)*zhat[2];
        zhatprime[1]  = zhat[1];
        zhatprime[2] = Math.sin(-thetaStep3d)*zhat[0] + Math.cos(-thetaStep3d)*zhat[2];
        xhat = xhatprime;
        yhat = yhatprime;
        zhat = zhatprime;
    }

    if(localCommand == 0752){
        //rotate around zhat axis, so leave zhat fixed;
        var xhatprime = [1,0,0];
        var yhatprime = [0,1,0];
        var zhatprime = [0,0,1];
        xhatprime[0] = Math.cos(thetaStep3d)*xhat[0] - Math.sin(thetaStep3d)*xhat[1];
        xhatprime[1] = Math.sin(thetaStep3d)*xhat[0] + Math.cos(thetaStep3d)*xhat[1];
        xhatprime[2] = xhat[2];
        
        yhatprime[0] = Math.cos(thetaStep3d)*yhat[0] - Math.sin(thetaStep3d)*yhat[1];
        yhatprime[1] = Math.sin(thetaStep3d)*yhat[0] + Math.cos(thetaStep3d)*yhat[1];
        yhatprime[2] = yhat[2];
        
        zhatprime[0] = Math.cos(thetaStep3d)*zhat[0] - Math.sin(thetaStep3d)*zhat[1];
        zhatprime[1] = Math.sin(thetaStep3d)*zhat[0] + Math.cos(thetaStep3d)*zhat[1];
        zhatprime[2]  = zhat[2];

        xhat = xhatprime;
        yhat = yhatprime;
        zhat = zhatprime;
    }
    if(localCommand == 0753){
        //rotate around zhat axis, so leave zhat fixed;
        var xhatprime = [1,0,0];
        var yhatprime = [0,1,0];
        var zhatprime = [0,0,1];
        xhatprime[0] = Math.cos(-thetaStep3d)*xhat[0] - Math.sin(-thetaStep3d)*xhat[1];
        xhatprime[1] = Math.sin(-thetaStep3d)*xhat[0] + Math.cos(-thetaStep3d)*xhat[1];
        xhatprime[2] = xhat[2];
        
        yhatprime[0] = Math.cos(-thetaStep3d)*yhat[0] - Math.sin(-thetaStep3d)*yhat[1];
        yhatprime[1] = Math.sin(-thetaStep3d)*yhat[0] + Math.cos(-thetaStep3d)*yhat[1];
        yhatprime[2] = yhat[2];
        
        zhatprime[0] = Math.cos(-thetaStep3d)*zhat[0] - Math.sin(-thetaStep3d)*zhat[1];
        zhatprime[1] = Math.sin(-thetaStep3d)*zhat[0] + Math.cos(-thetaStep3d)*zhat[1];
        zhatprime[2]  = zhat[2];
        xhat = xhatprime;
        yhat = yhatprime;
        zhat = zhatprime;
    }


    if(localCommand == 0754){
        //rotate around xhat axis, so leave xhat fixed;
        var xhatprime = [1,0,0];
        var yhatprime = [0,1,0];
        var zhatprime = [0,0,1];
        
        xhatprime[0] = xhat[0];
        xhatprime[1] = Math.cos(thetaStep3d)*xhat[1] - Math.sin(thetaStep3d)*xhat[2];
        xhatprime[2] = Math.sin(thetaStep3d)*xhat[1] + Math.cos(thetaStep3d)*xhat[2];
        
        yhatprime[0] = yhat[0];
        yhatprime[1] = Math.cos(thetaStep3d)*yhat[1] - Math.sin(thetaStep3d)*yhat[2];
        yhatprime[2] = Math.sin(thetaStep3d)*yhat[1] + Math.cos(thetaStep3d)*yhat[2];

        zhatprime[0]  = zhat[0];
        zhatprime[1] = Math.cos(thetaStep3d)*zhat[1] - Math.sin(thetaStep3d)*zhat[2];
        zhatprime[2] = Math.sin(thetaStep3d)*zhat[1] + Math.cos(thetaStep3d)*zhat[2];

        xhat = xhatprime;
        yhat = yhatprime;
        zhat = zhatprime;
    }
    if(localCommand == 0755){
        //rotate around xhat axis, so leave xhat fixed;
        var xhatprime = [1,0,0];
        var yhatprime = [0,1,0];
        var zhatprime = [0,0,1];

        xhatprime[0] = xhat[0];
        xhatprime[1] = Math.cos(-thetaStep3d)*xhat[1] - Math.sin(-thetaStep3d)*xhat[2];
        xhatprime[2] = Math.sin(-thetaStep3d)*xhat[1] + Math.cos(-thetaStep3d)*xhat[2];
        
        yhatprime[0] = yhat[0];
        yhatprime[1] = Math.cos(-thetaStep3d)*yhat[1] - Math.sin(-thetaStep3d)*yhat[2];
        yhatprime[2] = Math.sin(-thetaStep3d)*yhat[1] + Math.cos(-thetaStep3d)*yhat[2];

        zhatprime[0]  = zhat[0];
        zhatprime[1] = Math.cos(-thetaStep3d)*zhat[1] - Math.sin(-thetaStep3d)*zhat[2];
        zhatprime[2] = Math.sin(-thetaStep3d)*zhat[1] + Math.cos(-thetaStep3d)*zhat[2];
        
        xhat = xhatprime;
        yhat = yhatprime;
        zhat = zhatprime;
    }
    if(localCommand == 0756){
        thetaStep3d /= 2;
    }
    if(localCommand == 0757){
        thetaStep3d *= 2;
    }
    if(localCommand == 0760){
        //start a new 2d glyph
        ctx = document.getElementById("mainCanvas").getContext("2d");
        ctx.clearRect(0,0,100,100);
        ctx.strokeStyle= "black";
        ctx.fillStyle= "white";
        ctx.fillRect(0,0,100,100);
        ctx.strokeRect(1,1,98,98);
        ctx.lineWidth = 1;    	
        unit = 98;
        x0 = 1;
        y0 = 99;
        doTheThing(0300);
    }
    if(localCommand == 0761){
        //drop glyph onto most recent 3d thing whatever that is
    //    convert canvas to png base 64, then put that into the url field of ImageTexture 
        
        var pngurl64 = document.getElementById("mainCanvas").toDataURL();
        var newit = document.createElement("ImageTexture");
        var apps = document.getElementsByTagName("appearance");
        var newm = document.createElement("material");
        newm.setAttribute("transparency",currentTrans);

        var oldm = apps[apps.length -1].getElementsByTagName("material")[0];
        apps[apps.length -1].removeChild(oldm);
        apps[apps.length -1].appendChild(newm);
        apps[apps.length -1].appendChild(newit);
        newit.url = pngurl64;

    }

    if(localCommand == 0770){
        var tempanglestep = thetaStep3d;
        thetaStep3d = currentQuantumAngles.theta[quantumAngleIndex];
        doTheThing(0754);
        thetaStep3d = tempanglestep;
    }
    if(localCommand == 0771){
        var tempanglestep = thetaStep3d;
        thetaStep3d = currentQuantumAngles.phi[quantumAngleIndex];
        doTheThing(0750);
        thetaStep3d = tempanglestep;
    }
    if(localCommand == 0772){//scale by current state   
            //there needs to be an action that restores side to unit
            //and resets nothing else
            //then this can simply rescale side by the current states amplitude squared or amplitude
            
            side3d = side3d*1;
    }
    if(localCommand == 0773){//opacity by current state
        currentTrans = 1 - angles2mag(currentQuantumAngles.theta,quantumAngleIndex);           
        
    }
    if(localCommand == 0774){//previous quantum state
        quantumStateIndex--;
        if(quantumStateIndex < 0){
            quantumStateIndex = numberofStates - 1;
        }
        if(quantumStateIndex != numberofStates - 1){
            quantumAngleIndex = quantumStateIndex;
        }
        else{
            quantumAngleIndex = numberofStates - 1;
        }
    }
    if(localCommand == 0775){//next quantum state
        quantumStateIndex++;
        if(quantumStateIndex > numberofStates - 1){
           quantumStateIndex = 0;
        }
        if(quantumStateIndex != numberofStates - 1){
            quantumAngleIndex = quantumStateIndex;
        }
        else{
            quantumAngleIndex = numberofStates - 1;
        }

    }
    



    